{
    "map": {},
    "filename": "src/main/java/{{pathCase $.group}}/{{camelCase $.name}}/config/{{pascalCase $.name}}SecurityConfig.java",
    "formatUsing": "java"
}
---
package {{dotCase $.group}}.{{camelCase $.name}}.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
import org.springframework.beans.factory.annotation.Value;
import {{dotCase $.group}}.{{camelCase $.name}}.filter.CORSFilter;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class {{pascalCase $.name}}SecurityConfig {

    @Value("${ {{kebabCase $.name}}.cors.enabled:true}")
    private boolean corsEnabled;

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        if (corsEnabled) {
            http.addFilterAfter(
                new CORSFilter(),
                BasicAuthenticationFilter.class
            );
        }
		http
            // Disable Cross-Site Request Forgery (CSRF) protection
            .csrf(csrf -> csrf.disable())
            // Authorize all HTTP requests without authentication
            .authorizeHttpRequests(auth -> auth.anyRequest().permitAll());
        return http.build();
	}

}