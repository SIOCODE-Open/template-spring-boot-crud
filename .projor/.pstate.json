{
  "generatedSource": [
    {
      "filename": "build.gradle.kts",
      "content": "plugins {\n\tjava\n\tid(\"org.springframework.boot\") version \"3.3.3\"\n\tid(\"io.spring.dependency-management\") version \"1.1.6\"\n}\n\ngroup = \"com.example\"\nversion = \"0.0.1\"\n\njava {\n\ttoolchain {\n\t\tlanguageVersion = JavaLanguageVersion.of(17)\n\t}\n}\n\nconfigurations {\n\tcompileOnly {\n\t\textendsFrom(configurations.annotationProcessor.get())\n\t}\n}\n\nrepositories {\n\tmavenCentral()\n}\n\ndependencies {\n\timplementation(\"org.springframework.boot:spring-boot-starter-data-jdbc\")\n\timplementation(\"org.springframework.boot:spring-boot-starter-data-jpa\")\n\timplementation(\"org.springframework.boot:spring-boot-starter-security\")\n\timplementation(\"org.springframework.boot:spring-boot-starter-web\")\n\tcompileOnly(\"org.projectlombok:lombok\")\n\truntimeOnly(\"com.h2database:h2\")\n\truntimeOnly(\"org.postgresql:postgresql\")\n\tannotationProcessor(\"org.projectlombok:lombok\")\n\ttestImplementation(\"org.springframework.boot:spring-boot-starter-test\")\n\ttestImplementation(\"org.springframework.security:spring-security-test\")\n\ttestRuntimeOnly(\"org.junit.platform:junit-platform-launcher\")\n}\n\ntasks.withType<Test> {\n\tuseJUnitPlatform()\n}",
      "contentHash": "37a7b07fafb565389b385e8113ada158d23ff69aa341febf9d1cbbe0cb71832e",
      "noWriteIfExists": false
    },
    {
      "filename": "ENTITIES.md",
      "content": "# Product\n\nA product in the system\n\n_Attributes_\n\n* Name : `String` - The name of the product\n* Description : `String` - The description of the product, supports Markdown\n\n\n_Associations_\n\n* Manufacturer : `Manufacturer` - The manufacturer of the product\n\n\n# Manufacturer\n\nA manufacturer of products\n\n_Attributes_\n\n* Name : `String` - The name of the manufacturer\n* Description : `String` - The description of the manufacturer, supports Markdown\n* Website : `String` - The URL of the manufacturer's website\n\n\n\n",
      "contentHash": "db4b1aee795bade25220c3e6b8733be310a6a921d80755bf366fd297c0c6c0b3",
      "noWriteIfExists": false
    },
    {
      "filename": "README.md",
      "content": "# Backend\n\nThis is a template for a [Spring Boot](https://spring.io/projects/spring-boot)-based CRUD service. You can customize this template by editing the [`.projor/.entities` file](.projor/.entities), and using [ProJor](https://projor.io) to generate the code.\n\n_You can edit this description in [`.projor/project.pglobal.yaml`](.projor/project.pglobal.yaml)_\n\n## Configuration\n\nYou can change the configuration of the generated backend with the following environment variables:\n\n* `BACKEND_JDBC_URL`: The JDBC URL of the database. Defaults to `jdbc:h2:mem:backend_db`.\n* `BACKEND_DB_USERNAME`: The username to connect to the database. Defaults to `backend_user`.\n* `BACKEND_DB_PASSWORD`: The password to connect to the database. Defaults to `backend_password`.\n* `BACKEND_DB_DRIVER`: The JDBC driver class name. Defaults to `org.h2.Driver`.\n* `BACKEND_DB_PLATFORM`: The Hibernate dialect to use. Defaults to `org.hibernate.dialect.H2Dialect`.\n* `BACKEND_DB_DDL_AUTO`: The Hibernate DDL auto setting. Defaults to `update`.\n\n## Running\n\nYou can build and run the generated service with the following commands:\n\n* Windows: `gradlew bootRun`\n* macOS/Linux: `./gradlew bootRun`\n\n## API\n\n_Authentication_: The generated API request _no authentication_, and allows _any request_ to be made.\n\n### `GET /backend/v1/product`\n\nLists all Product entities.\n\n_Response_\n\n```json\n[\n    {\n        \"id\": \"string\",\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"manufacturerId\": \"string\",\n    },\n]\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type {Array<{id: string, name: string, description: string, manufacturerId: string,  }>} */\n  const response = await fetch('http://localhost:8080/backend/v1/product');\n  ```\n\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X GET http://localhost:8080/backend/v1/product\n  ```\n\n</details>\n\n### `GET /backend/v1/product/{id}`\n\nGets a Product entity by ID.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Response_\n\n```json\n{\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"manufacturerId\": \"string\",\n}\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type { {id: string, name: string, description: string, manufacturerId: string,  } } */\n  const response = await fetch('http://localhost:8080/backend/v1/product/{id}');\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X GET http://localhost:8080/backend/v1/product/{id}\n  ```\n</details>\n\n### `POST /backend/v1/product`\n\nCreates a new Product entity.\n\n_Request Body_\n\n```json\n{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"manufacturerId\": \"string\",\n}\n```\n\n_Response_\n\n```json\n{\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"manufacturerId\": \"string\",\n}\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type { {id: string, name: string, description: string, manufacturerId: string,  } } */\n  const response = await fetch('http://localhost:8080/backend/v1/product', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"manufacturerId\": \"string\",\n    }),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"manufacturerId\": \"string\",\n  }' http://localhost:8080/backend/v1/product\n  ```\n</details>\n\n### `DELETE /backend/v1/product/{id}`\n\nDeletes a Product entity by ID.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/product/{id}', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:8080/backend/v1/product/{id}\n  ```\n</details>\n\n### `POST /backend/v1/product/{id}/name`\n\nUpdates the `name` attribute of a Product entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Request Body_\n\n```json\n\"string\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/product/{id}/name', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string\"' http://localhost:8080/backend/v1/product/{id}/name\n  ```\n</details>\n\n### `DELETE /backend/v1/product/{id}/name`\n\nClears the `name` attribute of a Product entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/product/{id}/name', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:8080/backend/v1/product/{id}/name\n  ```\n</details>\n### `POST /backend/v1/product/{id}/description`\n\nUpdates the `description` attribute of a Product entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Request Body_\n\n```json\n\"string\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/product/{id}/description', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string\"' http://localhost:8080/backend/v1/product/{id}/description\n  ```\n</details>\n\n### `DELETE /backend/v1/product/{id}/description`\n\nClears the `description` attribute of a Product entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/product/{id}/description', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:8080/backend/v1/product/{id}/description\n  ```\n</details>\n\n### `POST /backend/v1/product/{id}/manufacturer`\n\nUpdates the `manufacturer` association of a Product entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Request Body_\n\n```json\n\"string (id of the associated entity)\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/product/{id}/manufacturer', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string (id of the associated entity)\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string (id of the associated entity)\"' http://localhost:8080/backend/v1/product/{id}/manufacturer\n  ```\n</details>\n\n### `DELETE /backend/v1/product/{id}/manufacturer`\n\nClears the `manufacturer` association of a Product entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/product/{id}/manufacturer', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:8080/backend/v1/product/{id}/manufacturer\n  ```\n</details>\n\n\n### `GET /backend/v1/manufacturer`\n\nLists all Manufacturer entities.\n\n_Response_\n\n```json\n[\n    {\n        \"id\": \"string\",\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"website\": \"string\",\n    },\n]\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type {Array<{id: string, name: string, description: string, website: string,  }>} */\n  const response = await fetch('http://localhost:8080/backend/v1/manufacturer');\n  ```\n\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X GET http://localhost:8080/backend/v1/manufacturer\n  ```\n\n</details>\n\n### `GET /backend/v1/manufacturer/{id}`\n\nGets a Manufacturer entity by ID.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Response_\n\n```json\n{\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"website\": \"string\",\n}\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type { {id: string, name: string, description: string, website: string,  } } */\n  const response = await fetch('http://localhost:8080/backend/v1/manufacturer/{id}');\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X GET http://localhost:8080/backend/v1/manufacturer/{id}\n  ```\n</details>\n\n### `POST /backend/v1/manufacturer`\n\nCreates a new Manufacturer entity.\n\n_Request Body_\n\n```json\n{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"website\": \"string\",\n}\n```\n\n_Response_\n\n```json\n{\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"website\": \"string\",\n}\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type { {id: string, name: string, description: string, website: string,  } } */\n  const response = await fetch('http://localhost:8080/backend/v1/manufacturer', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"website\": \"string\",\n    }),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"website\": \"string\",\n  }' http://localhost:8080/backend/v1/manufacturer\n  ```\n</details>\n\n### `DELETE /backend/v1/manufacturer/{id}`\n\nDeletes a Manufacturer entity by ID.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/manufacturer/{id}', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:8080/backend/v1/manufacturer/{id}\n  ```\n</details>\n\n### `POST /backend/v1/manufacturer/{id}/name`\n\nUpdates the `name` attribute of a Manufacturer entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Request Body_\n\n```json\n\"string\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/manufacturer/{id}/name', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string\"' http://localhost:8080/backend/v1/manufacturer/{id}/name\n  ```\n</details>\n\n### `DELETE /backend/v1/manufacturer/{id}/name`\n\nClears the `name` attribute of a Manufacturer entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/manufacturer/{id}/name', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:8080/backend/v1/manufacturer/{id}/name\n  ```\n</details>\n### `POST /backend/v1/manufacturer/{id}/description`\n\nUpdates the `description` attribute of a Manufacturer entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Request Body_\n\n```json\n\"string\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/manufacturer/{id}/description', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string\"' http://localhost:8080/backend/v1/manufacturer/{id}/description\n  ```\n</details>\n\n### `DELETE /backend/v1/manufacturer/{id}/description`\n\nClears the `description` attribute of a Manufacturer entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/manufacturer/{id}/description', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:8080/backend/v1/manufacturer/{id}/description\n  ```\n</details>\n### `POST /backend/v1/manufacturer/{id}/website`\n\nUpdates the `website` attribute of a Manufacturer entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Request Body_\n\n```json\n\"string\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/manufacturer/{id}/website', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string\"' http://localhost:8080/backend/v1/manufacturer/{id}/website\n  ```\n</details>\n\n### `DELETE /backend/v1/manufacturer/{id}/website`\n\nClears the `website` attribute of a Manufacturer entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:8080/backend/v1/manufacturer/{id}/website', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:8080/backend/v1/manufacturer/{id}/website\n  ```\n</details>\n\n\n\n## License\n\nThis template is licensed under the [MIT License](LICENSE.md).\n\n[ProJor] is licensed under either the [ProJor Free License](https://license.projor.io) or the [ProJor Commercial License](https://license.projor.io).",
      "contentHash": "b873bdd4bd43ed8a7f8a374bfa9c6c098e331ac32159f507ff9fb6cdf8becfee",
      "noWriteIfExists": false
    },
    {
      "filename": "settings.gradle.kts",
      "content": "rootProject.name = \"backend\"",
      "contentHash": "aacc23fe446c5924db6eb3a59eebe3936e92d791983c7b33409ac4ab2a7db3d8",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/BackendApplication.java",
      "content": "package com.example.backend;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class BackendApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(BackendApplication.class, args);\n    }\n}\n",
      "contentHash": "6e06bd4b429f77950034ec79e55797d812c1738b786edcd8c27235bdcb3b890c",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/config/BackendSecurityConfig.java",
      "content": "package com.example.backend.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity\npublic class BackendSecurityConfig {\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http)\n        throws Exception {\n        http\n            // Disable Cross-Site Request Forgery (CSRF) protection\n            .csrf(csrf -> csrf.disable())\n            // Authorize all HTTP requests without authentication\n            .authorizeHttpRequests(auth -> auth.anyRequest().permitAll());\n        return http.build();\n    }\n}\n",
      "contentHash": "1f0851c348aee84d65f4d2c644a0c97c33ecf9470c776150b745b8c8aaf42b45",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/controller/ManufacturerCRUDController.java",
      "content": "package com.example.backend.controller;\n\nimport com.example.backend.dto.ManufacturerDto;\nimport com.example.backend.dto.NewManufacturerDto;\nimport com.example.backend.service.ManufacturerCRUDService;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/backend/v1/manufacturer\")\npublic class ManufacturerCRUDController {\n\n    @Autowired\n    private ManufacturerCRUDService service;\n\n    @GetMapping\n    public List<ManufacturerDto> listAll() {\n        return service.listAll();\n    }\n\n    @GetMapping(\"{id}\")\n    public ManufacturerDto getById(@PathVariable String id) {\n        return service.getById(id);\n    }\n\n    @PostMapping\n    public ManufacturerDto create(@RequestBody NewManufacturerDto newDto) {\n        return service.create(newDto);\n    }\n\n    @PostMapping(\n        value = \"{id}/name\",\n        consumes = \"application/json\",\n        produces = \"application/json\"\n    )\n    public void updateName(@PathVariable String id, @RequestBody Object value) {\n        final java.lang.String name = (java.lang.String) value;\n        service.updateName(id, name);\n    }\n\n    @DeleteMapping(\"{id}/name\")\n    public void clearName(\n        @PathVariable String id,\n        @RequestBody java.lang.String name\n    ) {\n        service.clearName(id);\n    }\n\n    @PostMapping(\n        value = \"{id}/description\",\n        consumes = \"application/json\",\n        produces = \"application/json\"\n    )\n    public void updateDescription(\n        @PathVariable String id,\n        @RequestBody Object value\n    ) {\n        final java.lang.String description = (java.lang.String) value;\n        service.updateDescription(id, description);\n    }\n\n    @DeleteMapping(\"{id}/description\")\n    public void clearDescription(\n        @PathVariable String id,\n        @RequestBody java.lang.String description\n    ) {\n        service.clearDescription(id);\n    }\n\n    @PostMapping(\n        value = \"{id}/website\",\n        consumes = \"application/json\",\n        produces = \"application/json\"\n    )\n    public void updateWebsite(\n        @PathVariable String id,\n        @RequestBody Object value\n    ) {\n        final java.lang.String website = (java.lang.String) value;\n        service.updateWebsite(id, website);\n    }\n\n    @DeleteMapping(\"{id}/website\")\n    public void clearWebsite(\n        @PathVariable String id,\n        @RequestBody java.lang.String website\n    ) {\n        service.clearWebsite(id);\n    }\n\n    @DeleteMapping(\"{id}\")\n    public void delete(@PathVariable String id) {\n        service.deleteById(id);\n    }\n}\n",
      "contentHash": "24adc16af917c842ceddcdd6b60fab20ddd1f99bfa6147468fe9bca4d7169b6f",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/controller/ProductCRUDController.java",
      "content": "package com.example.backend.controller;\n\nimport com.example.backend.dto.NewProductDto;\nimport com.example.backend.dto.ProductDto;\nimport com.example.backend.service.ProductCRUDService;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/backend/v1/product\")\npublic class ProductCRUDController {\n\n    @Autowired\n    private ProductCRUDService service;\n\n    @GetMapping\n    public List<ProductDto> listAll() {\n        return service.listAll();\n    }\n\n    @GetMapping(\"{id}\")\n    public ProductDto getById(@PathVariable String id) {\n        return service.getById(id);\n    }\n\n    @PostMapping\n    public ProductDto create(@RequestBody NewProductDto newDto) {\n        return service.create(newDto);\n    }\n\n    @PostMapping(\n        value = \"{id}/name\",\n        consumes = \"application/json\",\n        produces = \"application/json\"\n    )\n    public void updateName(@PathVariable String id, @RequestBody Object value) {\n        final java.lang.String name = (java.lang.String) value;\n        service.updateName(id, name);\n    }\n\n    @DeleteMapping(\"{id}/name\")\n    public void clearName(\n        @PathVariable String id,\n        @RequestBody java.lang.String name\n    ) {\n        service.clearName(id);\n    }\n\n    @PostMapping(\n        value = \"{id}/description\",\n        consumes = \"application/json\",\n        produces = \"application/json\"\n    )\n    public void updateDescription(\n        @PathVariable String id,\n        @RequestBody Object value\n    ) {\n        final java.lang.String description = (java.lang.String) value;\n        service.updateDescription(id, description);\n    }\n\n    @DeleteMapping(\"{id}/description\")\n    public void clearDescription(\n        @PathVariable String id,\n        @RequestBody java.lang.String description\n    ) {\n        service.clearDescription(id);\n    }\n\n    @PostMapping(\n        value = \"{id}/manufacturer\",\n        consumes = \"application/json\",\n        produces = \"application/json\"\n    )\n    public void updateManufacturer(\n        @PathVariable String id,\n        @RequestBody Object value\n    ) {\n        final String manufacturerId = (String) value;\n        service.updateManufacturer(id, manufacturerId);\n    }\n\n    @DeleteMapping(\"{id}/manufacturer\")\n    public void clearManufacturer(@PathVariable String id) {\n        service.clearManufacturer(id);\n    }\n\n    @DeleteMapping(\"{id}\")\n    public void delete(@PathVariable String id) {\n        service.deleteById(id);\n    }\n}\n",
      "contentHash": "ba5f25ca4c3c68b2b59a79a3ce9e984846a3265d8b53997740604630587b455e",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/dto/convert/ManufacturerEntityToDto.java",
      "content": "package com.example.backend.dto.convert;\n\nimport com.example.backend.dto.ManufacturerDto;\nimport com.example.backend.entity.ManufacturerEntity;\n\n/**\n * Converts a ManufacturerEntity to a ManufacturerDto\n */\npublic class ManufacturerEntityToDto {\n\n    /**\n     * Converts a ManufacturerEntity to a ManufacturerDto\n     *\n     * @param entity the entity to convert\n     * @return the converted dto\n     */\n    public ManufacturerDto convert(ManufacturerEntity entity) {\n        ManufacturerDto dto = new ManufacturerDto();\n        dto.setId(entity.getId());\n        dto.setName(entity.getName());\n        dto.setDescription(entity.getDescription());\n        dto.setWebsite(entity.getWebsite());\n        return dto;\n    }\n}\n",
      "contentHash": "c690b665c209f746fd4f1299cf3d4876e9b09940399c0aa47445915f745a9232",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/dto/convert/ProductEntityToDto.java",
      "content": "package com.example.backend.dto.convert;\n\nimport com.example.backend.dto.ProductDto;\nimport com.example.backend.entity.ProductEntity;\n\n/**\n * Converts a ProductEntity to a ProductDto\n */\npublic class ProductEntityToDto {\n\n    /**\n     * Converts a ProductEntity to a ProductDto\n     *\n     * @param entity the entity to convert\n     * @return the converted dto\n     */\n    public ProductDto convert(ProductEntity entity) {\n        ProductDto dto = new ProductDto();\n        dto.setId(entity.getId());\n        dto.setName(entity.getName());\n        dto.setDescription(entity.getDescription());\n        if (entity.getManufacturer() != null) {\n            dto.setManufacturerId(entity.getManufacturer().getId());\n        } else {\n            dto.setManufacturerId(null);\n        }\n        return dto;\n    }\n}\n",
      "contentHash": "3bab71927a5892934db8cf61093454fc5d3ea8d82098a3827bee6fc442c0adb5",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/dto/ManufacturerDto.java",
      "content": "package com.example.backend.dto;\n\nimport lombok.*;\n\n/**\n * A manufacturer of products\n */\n@Data\npublic class ManufacturerDto {\n\n    /**\n     * The unique identifier for the Manufacturer\n     */\n    private String id;\n    /**\n     * The name of the manufacturer\n     */\n    private java.lang.String name;\n    /**\n     * The description of the manufacturer, supports Markdown\n     */\n    private java.lang.String description;\n    /**\n     * The URL of the manufacturer's website\n     */\n    private java.lang.String website;\n}\n",
      "contentHash": "0096fca682a9c62d6c3f081213f9d8d259e300390012bae001acc6c4c699269b",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/dto/NewManufacturerDto.java",
      "content": "package com.example.backend.dto;\n\nimport lombok.*;\n\n/**\n * A manufacturer of products\n */\n@Data\npublic class NewManufacturerDto {\n\n    /**\n     * The name of the manufacturer\n     */\n    private java.lang.String name;\n    /**\n     * The description of the manufacturer, supports Markdown\n     */\n    private java.lang.String description;\n    /**\n     * The URL of the manufacturer's website\n     */\n    private java.lang.String website;\n}\n",
      "contentHash": "8fd05f8e1ecf1b298eb62f505f531dff65849a1f9577ad08d36fe5c8905d1967",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/dto/NewProductDto.java",
      "content": "package com.example.backend.dto;\n\nimport lombok.*;\n\n/**\n * A product in the system\n */\n@Data\npublic class NewProductDto {\n\n    /**\n     * The name of the product\n     */\n    private java.lang.String name;\n    /**\n     * The description of the product, supports Markdown\n     */\n    private java.lang.String description;\n    /**\n     * The manufacturer of the product\n     */\n    private String manufacturerId;\n}\n",
      "contentHash": "5320bca8d447cbbfdc054e3a75071162e452d2bf1c07a8802cb650aefe66a8f2",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/dto/ProductDto.java",
      "content": "package com.example.backend.dto;\n\nimport lombok.*;\n\n/**\n * A product in the system\n */\n@Data\npublic class ProductDto {\n\n    /**\n     * The unique identifier for the Product\n     */\n    private String id;\n    /**\n     * The name of the product\n     */\n    private java.lang.String name;\n    /**\n     * The description of the product, supports Markdown\n     */\n    private java.lang.String description;\n    /**\n     * The manufacturer of the product\n     */\n    private String manufacturerId;\n}\n",
      "contentHash": "7e2878b2ed1a4ecafc464fa38c77bf9fbbe2988adf0e88cbfc7a843eb7778f5b",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/entity/ManufacturerEntity.java",
      "content": "package com.example.backend.entity;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n/**\n * A manufacturer of products\n */\n@Entity\n@Table(name = \"manufacturer\")\n@Data\npublic class ManufacturerEntity {\n    /**\n     * The unique identifier for the Manufacturer\n     */\n    @Id\n    @Column(name = \"manufacturer_id\", nullable = false)\n    private String id;\n\n    /**\n     * The name of the manufacturer\n     */\n    @Column(name = \"name\", nullable = true, insertable = true, updatable = true)\n    private java.lang.String name;\n    /**\n     * The description of the manufacturer, supports Markdown\n     */\n    @Column(name = \"description\", nullable = true, insertable = true, updatable = true)\n    private java.lang.String description;\n    /**\n     * The URL of the manufacturer's website\n     */\n    @Column(name = \"website\", nullable = true, insertable = true, updatable = true)\n    private java.lang.String website;\n}",
      "contentHash": "4454c1a5b0cd43ed6e1f6ae13f4db834066c924c55075a8df6fbb7a3f7c91f17",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/entity/ProductEntity.java",
      "content": "package com.example.backend.entity;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n/**\n * A product in the system\n */\n@Entity\n@Table(name = \"product\")\n@Data\npublic class ProductEntity {\n    /**\n     * The unique identifier for the Product\n     */\n    @Id\n    @Column(name = \"product_id\", nullable = false)\n    private String id;\n\n    /**\n     * The name of the product\n     */\n    @Column(name = \"name\", nullable = true, insertable = true, updatable = true)\n    private java.lang.String name;\n    /**\n     * The description of the product, supports Markdown\n     */\n    @Column(name = \"description\", nullable = true, insertable = true, updatable = true)\n    private java.lang.String description;\n    /**\n     * The manufacturer of the product\n     */\n    @ManyToOne(fetch = FetchType.LAZY, optional = true)\n    @JoinColumn(name = \"manufacturer_id\", nullable = true, insertable = true, updatable = true)\n    private ManufacturerEntity manufacturer;\n}",
      "contentHash": "3adb1b210e91995b03c09bc1e0ed177fd6c059e5be38c58651b3efe04a3c93e4",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/repository/ManufacturerRepository.java",
      "content": "package com.example.backend.repository;\n\nimport com.example.backend.entity.ManufacturerEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.stereotype.Repository;\n\n/**\n * A manufacturer of products\n */\n@Repository\npublic interface ManufacturerRepository\n    extends\n        JpaRepository<ManufacturerEntity, String>,\n        JpaSpecificationExecutor<ManufacturerEntity> {}\n",
      "contentHash": "41d815751d2e39ad102eadc2e4ff60e659330c0b2ace9ad4315c437280705bf2",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/repository/ProductRepository.java",
      "content": "package com.example.backend.repository;\n\nimport com.example.backend.entity.ProductEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.stereotype.Repository;\n\n/**\n * A product in the system\n */\n@Repository\npublic interface ProductRepository\n    extends\n        JpaRepository<ProductEntity, String>,\n        JpaSpecificationExecutor<ProductEntity> {}\n",
      "contentHash": "1fff5d10755d3e1ed3c19acc6e735021192e7867bfc4a4ad0bc8635ef2877674",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/service/ManufacturerCRUDService.java",
      "content": "package com.example.backend.service;\n\nimport com.example.backend.dto.ManufacturerDto;\nimport com.example.backend.dto.NewManufacturerDto;\nimport java.util.List;\n\n/**\n * Provides CRUD (Create-Read-Update-Delete) operations for Manufacturer entities.\n */\npublic interface ManufacturerCRUDService {\n    /**\n     * Lists all Manufacturer entities.\n     *\n     * @return A list of all Manufacturer entities.\n     */\n    List<ManufacturerDto> listAll();\n\n    /**\n     * Retrieves a single Manufacturer entity by its unique identifier.\n     *\n     * @param id The unique identifier for the Manufacturer entity.\n     * @return The Manufacturer entity with the given unique identifier, or null if none exists.\n     */\n    ManufacturerDto getById(String id);\n\n    /**\n     * Creates a new Manufacturer entity.\n     *\n     * @param newDto The data for the new Manufacturer entity.\n     * @return The newly created Manufacturer entity.\n     */\n    ManufacturerDto create(NewManufacturerDto newDto);\n\n    /**\n     * Updates the name attribute of a Name entity.\n     *\n     * @param id The unique identifier for the Name entity.\n     * @param newValue The new value for the name attribute.\n     * @return The updated Name entity.\n     */\n    void updateName(String id, java.lang.String newValue);\n\n    /**\n     * Clears the name attribute of a Name entity, setting it to null.\n     *\n     * @param id The unique identifier for the Name entity.\n     */\n    void clearName(String id);\n    /**\n     * Updates the description attribute of a Description entity.\n     *\n     * @param id The unique identifier for the Description entity.\n     * @param newValue The new value for the description attribute.\n     * @return The updated Description entity.\n     */\n    void updateDescription(String id, java.lang.String newValue);\n\n    /**\n     * Clears the description attribute of a Description entity, setting it to null.\n     *\n     * @param id The unique identifier for the Description entity.\n     */\n    void clearDescription(String id);\n    /**\n     * Updates the website attribute of a Website entity.\n     *\n     * @param id The unique identifier for the Website entity.\n     * @param newValue The new value for the website attribute.\n     * @return The updated Website entity.\n     */\n    void updateWebsite(String id, java.lang.String newValue);\n\n    /**\n     * Clears the website attribute of a Website entity, setting it to null.\n     *\n     * @param id The unique identifier for the Website entity.\n     */\n    void clearWebsite(String id);\n\n    /**\n     * Deletes a Manufacturer entity by its unique identifier.\n     *\n     * @param id The unique identifier for the Manufacturer entity.\n     */\n    void deleteById(String id);\n}\n",
      "contentHash": "ee19157f53208f62b76c0ad532b1339e61859fd99dcf83a633dc6be99ce856de",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/service/ManufacturerCRUDServiceImpl.java",
      "content": "package com.example.backend.service;\n\nimport com.example.backend.dto.ManufacturerDto;\nimport com.example.backend.dto.NewManufacturerDto;\nimport com.example.backend.dto.convert.ManufacturerEntityToDto;\nimport com.example.backend.entity.*;\nimport com.example.backend.repository.*;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n/**\n * Implementation of the CRUD service for Manufacturer entities.\n */\n@Service\n@Transactional\npublic class ManufacturerCRUDServiceImpl implements ManufacturerCRUDService {\n\n    @Autowired\n    private ManufacturerRepository repository;\n\n    private final ManufacturerEntityToDto entityToDto =\n        new ManufacturerEntityToDto();\n\n    @Override\n    public List<ManufacturerDto> listAll() {\n        return repository\n            .findAll()\n            .stream()\n            .map(entityToDto::convert)\n            .collect(Collectors.toList());\n    }\n\n    @Override\n    public ManufacturerDto getById(String id) {\n        return repository.findById(id).map(entityToDto::convert).orElse(null);\n    }\n\n    @Override\n    public ManufacturerDto create(NewManufacturerDto newDto) {\n        final ManufacturerEntity entity = new ManufacturerEntity();\n        entity.setId(UUID.randomUUID().toString());\n        entity.setName(newDto.getName());\n        entity.setDescription(newDto.getDescription());\n        entity.setWebsite(newDto.getWebsite());\n        return entityToDto.convert(repository.save(entity));\n    }\n\n    @Override\n    public void updateName(String id, java.lang.String newValue) {\n        final ManufacturerEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\"No Name entity with id \" + id)\n            );\n        entity.setName(newValue);\n        repository.save(entity);\n    }\n\n    @Override\n    public void clearName(String id) {\n        final ManufacturerEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\"No Name entity with id \" + id)\n            );\n        entity.setName(null);\n        repository.save(entity);\n    }\n\n    @Override\n    public void updateDescription(String id, java.lang.String newValue) {\n        final ManufacturerEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\n                    \"No Description entity with id \" + id\n                )\n            );\n        entity.setDescription(newValue);\n        repository.save(entity);\n    }\n\n    @Override\n    public void clearDescription(String id) {\n        final ManufacturerEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\n                    \"No Description entity with id \" + id\n                )\n            );\n        entity.setDescription(null);\n        repository.save(entity);\n    }\n\n    @Override\n    public void updateWebsite(String id, java.lang.String newValue) {\n        final ManufacturerEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\"No Website entity with id \" + id)\n            );\n        entity.setWebsite(newValue);\n        repository.save(entity);\n    }\n\n    @Override\n    public void clearWebsite(String id) {\n        final ManufacturerEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\"No Website entity with id \" + id)\n            );\n        entity.setWebsite(null);\n        repository.save(entity);\n    }\n\n    @Override\n    public void deleteById(String id) {\n        repository.deleteById(id);\n    }\n}\n",
      "contentHash": "88d5b87cdf33ad98d55cc0122f973493d0f9c53569f35b2e45487f6e7892a8d8",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/service/ProductCRUDService.java",
      "content": "package com.example.backend.service;\n\nimport com.example.backend.dto.NewProductDto;\nimport com.example.backend.dto.ProductDto;\nimport java.util.List;\n\n/**\n * Provides CRUD (Create-Read-Update-Delete) operations for Product entities.\n */\npublic interface ProductCRUDService {\n    /**\n     * Lists all Product entities.\n     *\n     * @return A list of all Product entities.\n     */\n    List<ProductDto> listAll();\n\n    /**\n     * Retrieves a single Product entity by its unique identifier.\n     *\n     * @param id The unique identifier for the Product entity.\n     * @return The Product entity with the given unique identifier, or null if none exists.\n     */\n    ProductDto getById(String id);\n\n    /**\n     * Creates a new Product entity.\n     *\n     * @param newDto The data for the new Product entity.\n     * @return The newly created Product entity.\n     */\n    ProductDto create(NewProductDto newDto);\n\n    /**\n     * Updates the name attribute of a Name entity.\n     *\n     * @param id The unique identifier for the Name entity.\n     * @param newValue The new value for the name attribute.\n     * @return The updated Name entity.\n     */\n    void updateName(String id, java.lang.String newValue);\n\n    /**\n     * Clears the name attribute of a Name entity, setting it to null.\n     *\n     * @param id The unique identifier for the Name entity.\n     */\n    void clearName(String id);\n    /**\n     * Updates the description attribute of a Description entity.\n     *\n     * @param id The unique identifier for the Description entity.\n     * @param newValue The new value for the description attribute.\n     * @return The updated Description entity.\n     */\n    void updateDescription(String id, java.lang.String newValue);\n\n    /**\n     * Clears the description attribute of a Description entity, setting it to null.\n     *\n     * @param id The unique identifier for the Description entity.\n     */\n    void clearDescription(String id);\n\n    /**\n     * Updates the manufacturer association of a Manufacturer entity.\n     *\n     * @param id The unique identifier for the Manufacturer entity.\n     * @param newId The unique identifier for the new manufacturer entity.\n     * @return The updated Manufacturer entity.\n     */\n    void updateManufacturer(String id, String newId);\n\n    /**\n     * Clears the manufacturer association of a Manufacturer entity, setting it to null.\n     *\n     * @param id The unique identifier for the Manufacturer entity.\n     */\n    void clearManufacturer(String id);\n\n    /**\n     * Deletes a Product entity by its unique identifier.\n     *\n     * @param id The unique identifier for the Product entity.\n     */\n    void deleteById(String id);\n}\n",
      "contentHash": "fa6dd9580a966c3125e217ad9b0e2fde20d9018140ee9075d679d8502ab07f1a",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/java/com/example/backend/service/ProductCRUDServiceImpl.java",
      "content": "package com.example.backend.service;\n\nimport com.example.backend.dto.NewProductDto;\nimport com.example.backend.dto.ProductDto;\nimport com.example.backend.dto.convert.ProductEntityToDto;\nimport com.example.backend.entity.*;\nimport com.example.backend.repository.*;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n/**\n * Implementation of the CRUD service for Product entities.\n */\n@Service\n@Transactional\npublic class ProductCRUDServiceImpl implements ProductCRUDService {\n\n    @Autowired\n    private ProductRepository repository;\n\n    @Autowired\n    private ManufacturerRepository manufacturerRepository;\n\n    private final ProductEntityToDto entityToDto = new ProductEntityToDto();\n\n    @Override\n    public List<ProductDto> listAll() {\n        return repository\n            .findAll()\n            .stream()\n            .map(entityToDto::convert)\n            .collect(Collectors.toList());\n    }\n\n    @Override\n    public ProductDto getById(String id) {\n        return repository.findById(id).map(entityToDto::convert).orElse(null);\n    }\n\n    @Override\n    public ProductDto create(NewProductDto newDto) {\n        final ProductEntity entity = new ProductEntity();\n        entity.setId(UUID.randomUUID().toString());\n        entity.setName(newDto.getName());\n        entity.setDescription(newDto.getDescription());\n        if (newDto.getManufacturerId() != null) {\n            entity.setManufacturer(\n                manufacturerRepository\n                    .findById(newDto.getManufacturerId())\n                    .orElse(null)\n            );\n        } else {\n            entity.setManufacturer(null);\n        }\n        return entityToDto.convert(repository.save(entity));\n    }\n\n    @Override\n    public void updateName(String id, java.lang.String newValue) {\n        final ProductEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\"No Name entity with id \" + id)\n            );\n        entity.setName(newValue);\n        repository.save(entity);\n    }\n\n    @Override\n    public void clearName(String id) {\n        final ProductEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\"No Name entity with id \" + id)\n            );\n        entity.setName(null);\n        repository.save(entity);\n    }\n\n    @Override\n    public void updateDescription(String id, java.lang.String newValue) {\n        final ProductEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\n                    \"No Description entity with id \" + id\n                )\n            );\n        entity.setDescription(newValue);\n        repository.save(entity);\n    }\n\n    @Override\n    public void clearDescription(String id) {\n        final ProductEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\n                    \"No Description entity with id \" + id\n                )\n            );\n        entity.setDescription(null);\n        repository.save(entity);\n    }\n\n    @Override\n    public void updateManufacturer(String id, String newId) {\n        final ProductEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\n                    \"No Manufacturer entity with id \" + id\n                )\n            );\n        if (newId != null) {\n            entity.setManufacturer(\n                manufacturerRepository.findById(newId).orElse(null)\n            );\n        } else {\n            entity.setManufacturer(null);\n        }\n        repository.save(entity);\n    }\n\n    @Override\n    public void clearManufacturer(String id) {\n        final ProductEntity entity = repository\n            .findById(id)\n            .orElseThrow(() ->\n                new IllegalArgumentException(\n                    \"No Manufacturer entity with id \" + id\n                )\n            );\n        entity.setManufacturer(null);\n        repository.save(entity);\n    }\n\n    @Override\n    public void deleteById(String id) {\n        repository.deleteById(id);\n    }\n}\n",
      "contentHash": "3f4921916961809851c0150a5f010823be620489cabc806a9a3305d92b10da87",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main/resources/application.properties",
      "content": "# This is the app configuration file\n# Environment variable overrides are supported, always under the `BACKEND_` prefix\nspring.application.name=backend\n\n# DB configuration parameters\nspring.datasource.url=${ BACKEND_DB_URL:jdbc:h2:mem:backend_db}\nspring.datasource.username=${ BACKEND_DB_USERNAME:backend_user}\nspring.datasource.password=${ BACKEND_DB_PASSWORD:backend_password}\nspring.datasource.driver-class-name=${ BACKEND_DB_DRIVER:org.h2.Driver}\nspring.jpa.database-platform=${ BACKEND_DB_PLATFORM:org.hibernate.dialect.H2Dialect}\n# Update schema on startup by default\nspring.jpa.hibernate.ddl-auto=${ BACKEND_DB_DDL_AUTO:update}",
      "contentHash": "5a10fa0f18e2a619b3c7d1abe23c84fd2b699f6e6eac04e4de9b7cb67b2032bf",
      "noWriteIfExists": false
    }
  ]
}